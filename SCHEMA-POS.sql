/*CONFIGURACION DEL ESQUEMA DE LA BASE DE DATOS
PARA EL SISTEMA DE PUNTO DE VENTA 
(EJECUTAR CON SYSTEM O SYS)*/
--CREACION DE LOS TABLESPACES
CREATE TABLESPACE SISTEMA_VENTAS
DATAFILE 'C:\oraclexe\oradata\XE\SISTEMAVENTAS1.DBF'
SIZE 500M;

CREATE TEMPORARY TABLESPACE TEMP_SISTEMA_VENTAS
TEMPFILE 'C:\oraclexe\oradata\XE\TEMPSISTEMAVENTAS1.DBF'
SIZE 50M AUTOEXTEND ON;
--CREACION DE ESQUEMA
CREATE USER ROOT
IDENTIFIED BY "ROOT@1234"
DEFAULT TABLESPACE SISTEMA_VENTAS
TEMPORARY TABLESPACE TEMP_SISTEMA_VENTAS
PROFILE DEFAULT;
--ASIGNACION DE ROLES
GRANT CONNECT TO ROOT WITH ADMIN OPTION;
GRANT RESOURCE TO ROOT WITH ADMIN OPTION;
GRANT UNLIMITED TABLESPACE TO ROOT WITH ADMIN OPTION;
GRANT CREATE USER, ALTER USER, DROP USER TO ROOT;
GRANT CREATE ROLE TO ROOT;
GRANT CREATE VIEW TO ROOT;
--INICIAR SESION EN ROOT
--CREACION DE TABLAS
CREATE TABLE PERMISOS (
    permisos_id NUMBER,
    acceso_ventas NUMBER(1) NOT NULL,
    acceso_inventario NUMBER(1) NOT NULL,
    acceso_reportes NUMBER(1) NOT NULL,
    acceso_clientes NUMBER(1) NOT NULL,
    acceso_proveedores NUMBER(1) NOT NULL,
    acceso_usuarios NUMBER(1) NOT NULL,
    acceso_configuracion NUMBER(1) NOT NULL,
    CONSTRAINT PK_PERMISOS_ID PRIMARY KEY (permisos_id)
);
CREATE TABLE USUARIO (
    usuario_id NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    fecha_registro DATE NOT NULL,
    disponibilidad NUMBER(1) NOT NULL,
    estado_eliminacion NUMBER(1) NOT NULL,
    permisos_id NUMBER NOT NULL,
    CONSTRAINT PK_USUARIO_ID PRIMARY KEY (usuario_id),
    CONSTRAINT FK_USUARIO_PERMISOS_ID FOREIGN KEY (permisos_id) REFERENCES PERMISOS(permisos_id)
);
CREATE TABLE CLIENTE (
    cliente_id NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    telefono NUMBER(9) NOT NULL,
    correo VARCHAR2(100) NOT NULL,
    fecha_registro DATE NOT NULL,
    estado_eliminacion NUMBER(1) NOT NULL,
    CONSTRAINT PK_CLIENTE_ID PRIMARY KEY (cliente_id)
);
CREATE TABLE VENTA (
    venta_id NUMBER,
    total_impuesto NUMBER(8,2) NOT NULL,
    total_descuento NUMBER(8,2) NOT NULL,
    pago_cliente NUMBER(8,2) NOT NULL,
    fecha_registro DATE NOT NULL,
    cliente_id NUMBER NOT NULL,
    usuario_id NUMBER NOT NULL,
    CONSTRAINT PK_VENTA_ID PRIMARY KEY (venta_id),
    CONSTRAINT FK_VENTA_CLIENTE_ID FOREIGN KEY (cliente_id) REFERENCES CLIENTE(cliente_id),
    CONSTRAINT FK_VENTA_USUARIO_ID FOREIGN KEY (usuario_id) REFERENCES USUARIO(usuario_id)
);
CREATE TABLE PRODUCTO (
    producto_id NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    precio NUMBER(8,2) NOT NULL,
    costo NUMBER(8,2) NOT NULL,
    stock NUMBER NOT NULL,
    precio_variable NUMBER(1) NOT NULL,
    permitir_descuentos NUMBER(1) NOT NULL,
    visibilidad_en_caja NUMBER(1) NOT NULL,
    fecha_registro DATE NOT NULL,
    estado_eliminacion NUMBER(1) NOT NULL,
    CONSTRAINT PK_PRODUCTO_ID PRIMARY KEY (producto_id)
);
CREATE TABLE DEPARTAMENTO (
    departamento_id NUMBER,
    nombre VARCHAR2(100) NOT NULL,
    fecha_registro DATE NOT NULL,
    estado_eliminacion NUMBER(1) NOT NULL,
    CONSTRAINT PK_DEPARTAMENTO_ID PRIMARY KEY (departamento_id)
);
CREATE TABLE PROVEEDOR (
    proveedor_id NUMBER,
    razon_social VARCHAR2(100) NOT NULL,
    telefono NUMBER(9) NOT NULL,
    correo VARCHAR2(100) NOT NULL,
    fecha_registro DATE NOT NULL,
    estado_eliminacion NUMBER(1) NOT NULL,
    CONSTRAINT PK_PROVEEDOR_ID PRIMARY KEY (proveedor_id)
);
CREATE TABLE VENTA_PRODUCTO (
    venta_id NUMBER NOT NULL,
    producto_id NUMBER NOT NULL,
    cantidad NUMBER NOT NULL,
    CONSTRAINT FK_VENTA_PRODUCTO_ID PRIMARY KEY (venta_id,producto_id),
    FOREIGN KEY (venta_id) REFERENCES VENTA(venta_id),
    FOREIGN KEY (producto_id) REFERENCES PRODUCTO(producto_id)
);
CREATE TABLE PROVEEDOR_PRODUCTO (
    proveedor_id NUMBER NOT NULL,
    producto_id NUMBER NOT NULL,
    cantidad NUMBER NOT NULL,
    fecha_registro DATE NOT NULL,
    CONSTRAINT FK_PROVEEDOR_PRODUCTO_ID PRIMARY KEY (proveedor_id,producto_id),
    FOREIGN KEY (proveedor_id) REFERENCES PROVEEDOR(proveedor_id),
    FOREIGN KEY (producto_id) REFERENCES PRODUCTO(producto_id)
);
CREATE TABLE DEPARTAMENTO_PRODUCTO (
    departamento_id NUMBER NOT NULL,
    producto_id NUMBER NOT NULL,
    CONSTRAINT FK_DEPARTAMENTO_PRODUCTO_ID PRIMARY KEY (departamento_id,producto_id),
    FOREIGN KEY (departamento_id) REFERENCES DEPARTAMENTO(departamento_id),
    FOREIGN KEY (producto_id) REFERENCES PRODUCTO(producto_id)
);
CREATE TABLE SISTEMA(
    RUC VARCHAR(11),
    NUMERO_TERMINAL NUMBER,
    RAZON_SOCIAL VARCHAR(100),
    TELEFONO NUMBER(9),
    CODIGO_TIENDA VARCHAR(25),
    CIUDAD VARCHAR(45),
    PROVINCIA VARCHAR(45),
    DISTRITO VARCHAR(45),
    DIRECCION VARCHAR(100),
    CODIGO_POSTAL NUMBER
);
--CREACION DE ROLES
--ROL EMPLEADO
CREATE ROLE POS_EMPLEADO;
GRANT CONNECT TO POS_EMPLEADO;
GRANT SELECT, INSERT, UPDATE ON ROOT.CLIENTE TO POS_EMPLEADO;
GRANT SELECT, INSERT, UPDATE ON ROOT.VENTA TO POS_EMPLEADO;
GRANT SELECT, INSERT, UPDATE ON ROOT.DEPARTAMENTO TO POS_EMPLEADO;
GRANT SELECT, INSERT, UPDATE ON ROOT.PRODUCTO TO POS_EMPLEADO;
GRANT SELECT, INSERT, UPDATE ON ROOT.PROVEEDOR TO POS_EMPLEADO;
GRANT SELECT, INSERT, UPDATE ON ROOT.DEPARTAMENTO_PRODUCTO TO POS_EMPLEADO;
GRANT SELECT, INSERT, UPDATE ON ROOT.PROVEEDOR_PRODUCTO TO POS_EMPLEADO;
GRANT SELECT, INSERT, UPDATE ON ROOT.VENTA_PRODUCTO TO POS_EMPLEADO;
GRANT EXECUTE ON ROOT.SP_AGREGAR_CLIENTE TO POS_EMPLEADO;
GRANT EXECUTE ON ROOT.SP_MODIFICAR_CLIENTE TO POS_EMPLEADO;
GRANT EXECUTE ON ROOT.SP_ELIMINAR_CLIENTE TO POS_EMPLEADO;
GRANT SELECT ON ROOT.VW_TOTAL_CLIENTES TO POS_EMPLEADO;
--ROL ADMINISTRADOR
CREATE ROLE POS_ADMIN;
GRANT SELECT, INSERT, UPDATE ON ROOT.USUARIO TO POS_ADMIN;
GRANT SELECT, INSERT, UPDATE ON ROOT.PERMISOS TO POS_ADMIN;
GRANT SELECT, INSERT, UPDATE ON ROOT.SISTEMA TO POS_ADMIN;
GRANT EXECUTE ON ROOT.SP_GUARDAR_CONFIGURACION TO POS_ADMIN;
GRANT POS_EMPLEADO TO POS_ADMIN;
--AGREGANDO LOS DOS TIPOS DE ROLES SEGUN LOS PERMISOS
--PERMISOS DE EMPLEADO
INSERT ALL
INTO PERMISOS VALUES 
(
100,
1,
1,
0,
1,
1,
0,
0
)
--PERMISOS DE ADMINISTRADOR
INTO PERMISOS VALUES 
(
101,
1,
1,
1,
1,
1,
1,
1
)
SELECT 1 FROM dual;
COMMIT;
-- INICIAR SESION EN ROOT
-- SECUENCIAS
CREATE SEQUENCE SQ_CLIENTE START WITH 1;
CREATE SEQUENCE SQ_PROVEEDOR START WITH 1;
--PAQUETES
-- PAQUETE CLIENTES
-- PAQUETE PROVEEDORES
CREATE OR REPLACE PACKAGE ROOT_PROVEEDOR AS
   V_PROVEEDOR_ID_ULT_ENT ROOT.PROVEEDOR.PROVEEDOR_ID%TYPE;
   FUNCTION GET_PROVEEDOR_ID_ULT_ENT
    RETURN ROOT.PROVEEDOR.PROVEEDOR_ID%TYPE;
END ROOT_PROVEEDOR;
CREATE OR REPLACE PACKAGE BODY ROOT_PROVEEDOR AS
  FUNCTION GET_PROVEEDOR_ID_ULT_ENT
    RETURN ROOT.PROVEEDOR.PROVEEDOR_ID%TYPE
  IS
  BEGIN
    RETURN V_PROVEEDOR_ID_ULT_ENT;
  END;
END ROOT_PROVEEDOR;
--PAQUETE SISTEMA
CREATE OR REPLACE PACKAGE ROOT_SISTEMA AS
END ROOT_SISTEMA;

CREATE OR REPLACE PACKAGE BODY ROOT_SISTEMA AS
END ROOT_SISTEMA;
-- VISTAS
/*OBJETIVO: ESTA VISTA PERMITE CARGAR LOS USUARIOS
  QUE NO HAN SIDO DESACTIVADOS NI ELIMINADOS POR UN
  ADMINISTRADOR.
  USO: ESTE PROCEDIMIENTO SE UTILIZA AL INICIARSE
  EL SISTEMA Y AL CARGAR LA LISTA DE USUARIOS PARA
  INICIAR SESION.
 */
CREATE OR REPLACE VIEW VW_USUARIOS_ACTIVOS AS 
SELECT
U.USUARIO_ID,
U.NOMBRE,
U.DISPONIBILIDAD,
U.FECHA_REGISTRO
FROM ROOT.USUARIO U
WHERE U.ESTADO_ELIMINACION = 0
AND U.DISPONIBILIDAD = 1;

CREATE OR REPLACE VIEW VW_TOTAL_CLIENTES AS 
SELECT
C.CLIENTE_ID,
C.NOMBRE,
C.TELEFONO,
C.CORREO,
C.FECHA_REGISTRO
FROM ROOT.CLIENTE C
WHERE C.ESTADO_ELIMINACION = 0;

CREATE OR REPLACE VIEW VW_TOTAL_PROVEEDORES AS 
SELECT
P.PROVEEDOR_ID,
P.RAZON_SOCIAL,
P.TELEFONO,
P.CORREO,
P.FECHA_REGISTRO
FROM ROOT.PROVEEDOR P
WHERE P.ESTADO_ELIMINACION = 0;

CREATE OR REPLACE VIEW VW_ULTIMA_ENTREGA AS 
SELECT
PP.PROVEEDOR_ID,
PP.PRODUCTO_ID,
PP.CANTIDAD,
PP.FECHA_REGISTRO
FROM ROOT.PROVEEDOR_PRODUCTO PP
WHERE PP.PROVEEDOR_ID=ROOT_PROVEEDOR.GET_PROVEEDOR_ID_ULT_ENT
AND PP.FECHA_REGISTRO =
(SELECT MAX(PP.FECHA_REGISTRO)
FROM ROOT.PROVEEDOR_PRODUCTO PP
WHERE PP.PROVEEDOR_ID=ROOT_PROVEEDOR.GET_PROVEEDOR_ID_ULT_ENT
);

CREATE OR REPLACE VIEW VW_CONFIGURACION_SISTEMA AS 
SELECT
S.RUC,
S.NUMERO_TERMINAL,
S.RAZON_SOCIAL,
S.TELEFONO,
S.CODIGO_TIENDA,
S.CIUDAD,
S.PROVINCIA,
S.DISTRITO,
S.DIRECCION,
S.CODIGO_POSTAL
FROM ROOT.SISTEMA S
WHERE ROWNUM = 1;
-- PROCEDIMIENTOS
CREATE OR REPLACE PROCEDURE SP_GUARDAR_CONFIGURACION
(
P_RUC IN ROOT.SISTEMA.RUC%TYPE,
P_NUMERO_TERMINAL IN ROOT.SISTEMA.NUMERO_TERMINAL%TYPE,
P_RAZON_SOCIAL IN ROOT.SISTEMA.RAZON_SOCIAL%TYPE,
P_TELEFONO IN ROOT.SISTEMA.TELEFONO%TYPE,
P_CODIGO_TIENDA IN ROOT.SISTEMA.CODIGO_TIENDA%TYPE,
P_CIUDAD IN ROOT.SISTEMA.CIUDAD%TYPE,
P_PROVINCIA IN ROOT.SISTEMA.PROVINCIA%TYPE,
P_DISTRITO IN ROOT.SISTEMA.DISTRITO%TYPE,
P_DIRECCION IN ROOT.SISTEMA.DIRECCION%TYPE,
P_CODIGO_POSTAL IN ROOT.SISTEMA.CODIGO_POSTAL%TYPE
)
AS
  V_CANTIDAD_REGISTROS NUMBER;
BEGIN
  --BUSCANDO SI EXISTE UNA CONFIGURACION PREVIA EN LA TABLA SISTEMA
  SElECT COUNT(*)
  INTO V_CANTIDAD_REGISTROS
  FROM ROOT.SISTEMA;
  IF V_CANTIDAD_REGISTROS>0 THEN
     UPDATE ROOT.SISTEMA S
     SET
     S.RUC = P_RUC,
     S.NUMERO_TERMINAL = P_NUMERO_TERMINAL,
     S.RAZON_SOCIAL = P_RAZON_SOCIAL,
     S.TELEFONO = P_TELEFONO,
     S.CODIGO_TIENDA = P_CODIGO_TIENDA,
     S.CIUDAD = P_CIUDAD,
     S.PROVINCIA = P_PROVINCIA,
     S.DISTRITO = P_DISTRITO,
     S.DIRECCION = P_DIRECCION,
     S.CODIGO_POSTAL = P_CODIGO_POSTAL;
  ELSE
     INSERT INTO ROOT.SISTEMA
     VALUES
     (
      P_RUC,
      P_NUMERO_TERMINAL,
      P_RAZON_SOCIAL,
      P_TELEFONO,
      P_CODIGO_TIENDA,
      P_CIUDAD,
      P_PROVINCIA,
      P_DISTRITO,
      P_DIRECCION,
      P_CODIGO_POSTAL
     );
  END IF;
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SP_AGREGAR_USUARIO_EMPLEADO
(
P_NOMBRE IN ROOT.USUARIO.NOMBRE%TYPE,
P_PIN IN NUMBER
)
AS
V_NOMBRE_USUARIO VARCHAR(20);
V_USUARIO_ID NUMBER;
BEGIN
  /*OBJETIVO: ESTE PROCEDIMIENTO PERMITE CREAR UN
  NUEVO USUARIO/ESQUEMA EN LA BASE DE DATOS CON ROL
  DE EMPLEADO (ACCESO A CIERTAS TABLAS), Y UTILIZA 
  SU ID PARA AGREGAR UN NUEVO REGISTRO EN LA TABLA
  USUARIO DEL SISTEMA.
  USO: ESTE PROCEDIMIENTO SE UTILIZA EN EL MODULO
  DE USUARIOS, AL AGREGAR UN NUEVO USUARIO LUEGO
  DE LLENAR SUS DATOS Y PRESIONAR EL BOTON ACEPTAR.
 */
  --GENERANDO NUEVO NOMBRE DE USUARIO
  SELECT 
  'EMP'||
  COUNT(*)
  INTO V_NOMBRE_USUARIO
  FROM ROOT.USUARIO;
  --CREANDO USUARIO
  EXECUTE IMMEDIATE 
  ' CREATE USER '||V_NOMBRE_USUARIO||
  ' IDENTIFIED BY "'||P_PIN||'" '||
  ' DEFAULT TABLESPACE SISTEMA_VENTAS'||
  ' TEMPORARY TABLESPACE TEMP_SISTEMA_VENTAS'||
  ' PROFILE DEFAULT';
  --ASIGNANDO ROLES A USUARIO
  EXECUTE IMMEDIATE 
  'GRANT POS_EMPLEADO TO '||V_NOMBRE_USUARIO;
  --OBTENIENDO ID DE USUARIO CREADO
  SELECT 
  AU.USER_ID
  INTO V_USUARIO_ID
  FROM ALL_USERS AU
  WHERE AU.username=V_NOMBRE_USUARIO;
  --INSERTANDO USUARIO A TABLA
  INSERT INTO ROOT.USUARIO
  VALUES
  (
  V_USUARIO_ID,
  P_NOMBRE,
  SYSDATE,
  1,
  0,
  100
  );
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SP_AGREGAR_USUARIO_ADMIN
(
P_NOMBRE IN ROOT.USUARIO.NOMBRE%TYPE,
P_PIN IN NUMBER
)
AS
V_NOMBRE_USUARIO VARCHAR(20);
V_USUARIO_ID NUMBER;
BEGIN
  /*OBJETIVO: ESTE PROCEDIMIENTO PERMITE CREAR UN
  NUEVO USUARIO/ESQUEMA EN LA BASE DE DATOS CON ROL
  DE ADMINISTRADOR (ACCESO A TODAS LAS TABLAS), Y UTILIZA 
  SU ID PARA AGREGAR UN NUEVO REGISTRO EN LA TABLA
  USUARIO DEL SISTEMA.
  USO: ESTE PROCEDIMIENTO SE UTILIZA EN EL MODULO
  DE USUARIOS, AL AGREGAR UN NUEVO USUARIO LUEGO
  DE LLENAR SUS DATOS Y PRESIONAR EL BOTON ACEPTAR.
 */
  --GENERANDO NUEVO NOMBRE DE USUARIO
  SELECT 
  'ADMIN'||
  COUNT(*)
  INTO V_NOMBRE_USUARIO
  FROM ROOT.USUARIO;
  --CREANDO USUARIO
  EXECUTE IMMEDIATE 
  ' CREATE USER '||V_NOMBRE_USUARIO||
  ' IDENTIFIED BY "'||P_PIN||'" '||
  ' DEFAULT TABLESPACE SISTEMA_VENTAS'||
  ' TEMPORARY TABLESPACE TEMP_SISTEMA_VENTAS'||
  ' PROFILE DEFAULT';
  --ASIGNANDO ROLES A USUARIO
  EXECUTE IMMEDIATE 
  'GRANT POS_ADMIN TO '||V_NOMBRE_USUARIO;
  --OBTENIENDO ID DE USUARIO CREADO
  SELECT 
  AU.USER_ID
  INTO V_USUARIO_ID
  FROM ALL_USERS AU
  WHERE AU.username=V_NOMBRE_USUARIO;
  --INSERTANDO USUARIO A TABLA
  INSERT INTO ROOT.USUARIO
  VALUES
  (
  V_USUARIO_ID,
  P_NOMBRE,
  SYSDATE,
  1,
  0,
  101
  );
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SP_AGREGAR_CLIENTE
(
P_NOMBRE IN ROOT.CLIENTE.NOMBRE%TYPE,
P_TELEFONO IN ROOT.CLIENTE.TELEFONO%TYPE,
P_CORREO IN ROOT.CLIENTE.CORREO%TYPE
)
AS
BEGIN
  INSERT INTO ROOT.CLIENTE
  VALUES
  (
  SQ_CLIENTE.NEXTVAL,
  P_NOMBRE,
  P_TELEFONO,
  P_CORREO,
  SYSDATE,
  0
  );
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_CLIENTE
(
P_CLIENTE_ID IN ROOT.CLIENTE.CLIENTE_ID%TYPE,
P_NOMBRE IN ROOT.CLIENTE.NOMBRE%TYPE,
P_TELEFONO IN ROOT.CLIENTE.TELEFONO%TYPE,
P_CORREO IN ROOT.CLIENTE.CORREO%TYPE
)
AS
BEGIN
  UPDATE ROOT.CLIENTE C
  SET C.NOMBRE=P_NOMBRE,
  C.TELEFONO=P_TELEFONO,
  C.CORREO=P_CORREO
  WHERE C.CLIENTE_ID=P_CLIENTE_ID;
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_CLIENTE
(
P_CLIENTE_ID IN ROOT.CLIENTE.CLIENTE_ID%TYPE
)
AS
BEGIN
  UPDATE ROOT.CLIENTE C
  SET C.ESTADO_ELIMINACION=1
  WHERE C.CLIENTE_ID=P_CLIENTE_ID;
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SP_AGREGAR_PROVEEDOR
(
P_RAZON_SOCIAL IN ROOT.PROVEEDOR.RAZON_SOCIAL%TYPE,
P_TELEFONO IN ROOT.PROVEEDOR.TELEFONO%TYPE,
P_CORREO IN ROOT.PROVEEDOR.CORREO%TYPE
)
AS
BEGIN
  INSERT INTO ROOT.PROVEEDOR
  VALUES
  (
  SQ_PROVEEDOR.NEXTVAL,
  P_RAZON_SOCIAL,
  P_TELEFONO,
  P_CORREO,
  SYSDATE,
  0
  );
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_PROVEEDOR
(
P_PROVEEDOR_ID IN ROOT.PROVEEDOR.PROVEEDOR_ID%TYPE,
P_RAZON_SOCIAL IN ROOT.PROVEEDOR.RAZON_SOCIAL%TYPE,
P_TELEFONO IN ROOT.PROVEEDOR.TELEFONO%TYPE,
P_CORREO IN ROOT.PROVEEDOR.CORREO%TYPE
)
AS
BEGIN
  UPDATE ROOT.PROVEEDOR P
  SET P.RAZON_SOCIAL=P_RAZON_SOCIAL,
  P.TELEFONO=P_TELEFONO,
  P.CORREO=P_CORREO
  WHERE P.PROVEEDOR_ID=P_PROVEEDOR_ID;
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_PROVEEDOR
(
P_PROVEEDOR_ID IN ROOT.PROVEEDOR.PROVEEDOR_ID%TYPE
)
AS
BEGIN
  UPDATE ROOT.PROVEEDOR P
  SET P.ESTADO_ELIMINACION=1
  WHERE P.PROVEEDOR_ID=P_PROVEEDOR_ID;
  COMMIT;
END;

-- FUNCIONES
CREATE OR REPLACE FUNCTION F_OBTENER_USUARIO
(
P_USUARIO_ID ROOT.USUARIO.USUARIO_ID%TYPE
)
RETURN VARCHAR2
IS
 V_NOMBRE_USUARIO ALL_USERS.USERNAME%TYPE;
BEGIN
 /*OBJETIVO: ESTA FUNCION TE PERMITE OBTENER EL
 NOMBRE DE UN USUARIO DEL SISTEMA (Y DE LA BD)
 USANDO SU ID
 USO: ESTA FUNCION SE USA CUANDO SE INTENTA INICIAR
 SESION EN EL SISTEMA DE PUNTO DE VENTA.
 */
  V_NOMBRE_USUARIO:='';
  --BUSCANDO NOMBRE DE USUARIO
  SELECT 
  AU.USERNAME
  INTO V_NOMBRE_USUARIO
  FROM ALL_USERS AU
  WHERE AU.USER_ID=P_USUARIO_ID;
  --RETORNANDO NOMBRE DE USUARIO
  RETURN V_NOMBRE_USUARIO;
END;


-- INDICES
-- TRIGGERS




/*
--Limpiar BD
DELETE FROM ROOT.USUARIO;
DELETE FROM ROOT.CLIENTE;
DELETE FROM ROOT.PROVEEDOR;
*/
--Creacion de usuario default para configuracion de sistema
BEGIN
  SP_AGREGAR_USUARIO_ADMIN('ADMINISTRADOR',1234);
END;
--Pruebas
select * from dba_role_privs connect by prior granted_role = grantee start with grantee = '&USER' order by 1,2,3;
select * from dba_sys_privs  where grantee = '&USER' or grantee in (select granted_role from dba_role_privs connect by prior granted_role = grantee start with grantee = '&USER') order by 1,2,3;
select * from dba_tab_privs  where grantee = '&USER' or grantee in (select granted_role from dba_role_privs connect by prior granted_role = grantee start with grantee = '&USER') order by 1,2,3,4;
